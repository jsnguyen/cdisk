import os
import argparse
import pickle

import numpy as np
from pathlib import Path

from units import *

def generate_par(par_filename, parameters):

    print('Making cdi parameter file -> {}'.format(par_filename))

    # writing to actual par file
    with open(par_filename, 'w') as f:
        f.write('#### THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND ####\n')
        for el in parameters.keys():
            f.write('{:32} {:64}'.format(el,str(parameters[el])).rstrip()+'\n')

    # pickle file to use parameters elsewhere in analysis code
    par_pickle_filename = 'cdi.par.pickle'
    with open(par_pickle_filename, 'wb') as f:
        pickle.dump(parameters, f)

# technically a satellite not a planet
def generate_satellite(satellite_filename, satellites):

    print('Making cdi planet file -> {}'.format(satellite_filename))

    # write to the planet file
    param_names = ['name', 'a', 'mass', 'accretion', 'feels_disk', 'feels_others']
    with open(satellite_filename, 'w') as f:
        f.write('#### THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND ####\n')
        for s in satellites:
            for key in param_names:
                f.write(str(s[key])+' ')
            f.write('\n')

# gets the latest output directory
# useful so we don't accidentally overwrite old data
def get_outputdir():
    increment=0
    prepath = str(Path.home())
    outputdir = prepath+'/landing/data/cdi_'+str(increment).zfill(4)

    while os.path.isdir(outputdir):
        increment+=1
        outputdir = prepath+'/landing/data/cdi_'+str(increment).zfill(4)

    return outputdir
        
def main():

    planet = {}
    satellite = {}
    parameters = {}

    #####################
    # PLANET DEFINITION #
    #####################

    planet['mass'] = 1.0 * MJ_to_g # make sure MSTAR in fondham.h matches this

    ########################
    # SATELLITE DEFINITION #
    ########################

    satellites = []
    # the orbiting satellite
    s = {}
    s['name'] = 'CDIb'
    s['a'] = 0.1 * AU_to_cm
    s['mass'] = 1.0e-4 *  MJ_to_g
    s['period'] = 2*np.pi*np.sqrt(np.power(s['a'], 3)/(G_cgs*planet['mass']))
    s['accretion'] = 0.0
    s['feels_disk'] = 'YES'
    s['feels_others'] = 'YES'
    satellites.append(s)

    # the star
    # star orbits the planet in the planet reference frame
    star = {}
    star['name'] = 'CDIa'
    star['a'] = 5.2029 * AU_to_cm
    star['mass'] = 1.0e3 *  MJ_to_g
    star['period'] = None
    star['accretion'] = 0.0
    star['feels_disk'] = 'NO'
    star['feels_others'] = 'NO'
    satellites.append(star)

    r_trunc = 5*RJ_to_cm # truncation radius
    r_hill = star['a'] * np.power(planet['mass'] / (3*star['mass']), 1/3) # hill radius

    ########################
    # PARAMETER DEFINITION #
    ########################

    # disk parameters
    parameters['MassAccretion'] = 1.0e-7 * mass_accretion_conversion # jupiter mass / year to g / sec
    parameters['Rdep'] = r_hill/3.0 # deposit mass at this radius
    parameters['Alpha'] = 0.001

    # boundaries
    # x should be a full circle in units of radians
    parameters['Xmin'] = -np.pi
    parameters['Xmax'] = np.pi
    # inner/outer annulus distance
    parameters['Ymin'] = r_trunc
    parameters['Ymax'] = r_hill

    # initial eccentricity of the planets
    parameters['Eccentricity'] = 0.0

    # resolution parameters
    parameters['Spacing'] = 'log'
    grid_power = 7 # number of cells is 2^(n-1) , 2^n
    parameters['Ny'] = int(np.power(2, grid_power-1))
    parameters['Nx'] = int(np.power(2, grid_power))

    # timestep parameters
    parameters['DT'] = satellites[0]['period']/10
    parameters['Ninterm'] = 1
    n_sec = 10 # number of seconds for a 24 fps gif
    parameters['Ntot'] = 24*parameters['Ninterm']*n_sec

    # simulation files
    outputdir = get_outputdir()
    parameters['Setup'] = 'cdi'
    parameters['PlanetConfig'] = 'planets/cdi.cfg'
    parameters['OutputDir'] =  outputdir

    # rotating reference frame
    parameters['OmegaFrame'] = 0.0
    parameters['Frame'] = 'F'

    # smoothing parameters
    parameters['SigmaSlope'] = 0.8
    parameters['FlaringIndex'] = 0.25
    parameters['ThicknessSmoothing'] = 0.6
    parameters['RocheSmoothing'] = 0.0

    # wave damping/killing
    parameters['DampingZone'] = 1.15
    parameters['TauDamp'] = 0.3 # characteristic time for damping, units of inverse local orbital frequency

    # misc
    parameters['ExcludeHill'] = 'No' # hill sphere cutoff for force calculations
    parameters['IndirectTerm'] = 'Yes' # indirect term "ficticious force" due to gravity, usually set to yes

    # generate the par file
    par_filename = './cdi/cdi.par'
    generate_par(par_filename, parameters)

    # generate satellite file
    satellite_filename = 'cdi.cfg'
    generate_satellite(satellite_filename, satellites)

if __name__=='__main__':
    main()
